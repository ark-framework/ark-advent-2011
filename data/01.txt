プロジェクトを始める

はじめに
-------

このチュートリアルでは Advent Calendar の形式を借りて24日間にわたって Ark をつかったウェブアプリケーションの開発方法について説明します。

各章は約1時間ほどで終わる程度であり、実際のWebサイトを最初から最後までコーディングすることで Ark を学習します。

1日1時間24日で合計1日になります。これは Ark の基本を学ぶために必要な時間であると私たちは考えています。毎日、新しい機能がアプリケーションに追加され、Ark の Web 開発のベストプラクティスと同時に新しい機能を紹介するためにこの開発プロセスを利用します。

24日間で作成するアプリケーションの名前は *Jobeet* です。これは PHP のフレームワークである symfony のチュートリアルと同じです。このチュートリアルでは同じアプリケーションを Ark を使用して作成していきます。

Why Ark ?
----------

モダン Perl に慣れた人であれば、Ark を使うメリットをそれほど感じられないかもしれません。

PSGI/plack 以降のPerl界隈は Web Applicaiton FrameWork が乱立しており、Ark の他にも(Ark 以上に)有力なフレームワークは多数存在します。

また、plack その他豊富な CPAN モジュールを組み合わせれば、気軽に独自のフレームワークを構築することが可能になっているのはご存知のとおりでしょう。

Perl 開発に慣れており、手軽なアプリケーションを開発するのであれば、そういったフレームワークを採用しても良いでしょう。

Ark は Catalyst よりも手軽かつ軽量なフレームワークとして開発されましたが、今や Ark は 軽量かと問われると、そこまで軽量とは言えないかもしれません。

ただ、

- ある程度複雑なアプリケーションをカッチリと開発し、長期に渡って運用すること
- Perl に慣れていない人が Perl の流儀に惑わされずに開発ができること

等を実現する為には、フレームワーク側にある程度の厚みは必要です。

軽量かつあまり枯れていないフレームワークを使う場合は、必要に応じて自分でフレームワークのソースを読み、
足りない機能があったらモジュールやプラグインを自分で書いたりすることが求められます。
それが楽しいのは確かですが、初中級者にとってはハードルが高いのは確かでしょう。

Catalyst に似たルーティングインターフェースに関しても好き嫌いは分かれますが、慣れてくると複雑な URL も簡潔に表現できるメリットを感じられる
ことでしょう。

Catalyst のドキュメントを読めばなんとなく Ark のルーティングもわかるというメリット(?!)もあります。

なにより Ark は枯れています。

多数のサービスを作ってきた実績がありますし、数だけではなく、100万人のユーザーを抱えるようなサービスを1年以上稼働させた実績もあります。

Ark を使わない手はありません。


今日はなにを？
-----------

今日は Perl コードは書きません。
しかし1行も書かないにしても新規プロジェクトをブートストラップすることで Ark のようなフレームワークを使うことの利点を理解しはじめるでしょう。

この章の目標は開発環境のセットアップとWebブラウザでアプリケーションのページを表示させることです。


前提条件
-------

Ark は Perl のフレームワークなので当然 Perl がインストールされた環境が必要です。
Ark の開発・実行には Perl 5.8.1 以上が必要です。
最近は plenv で気軽に Perl をコンパイル可能なので新しいバージョンをガンガン使って行きましょう。

Windowsな環境をご利用の場合は、Cygwin や (?:Active|Strawberry)Perl で頑張るよりも VMware で
Linux 仮想マシンを構築するほうが結果的に労力が少なく済むと思います。

また、このチュートリアルではデータベースも使用します。
SQLite もしくは MySQL が使える環境であることを確認してください。

### Perl 開発環境の構築

近年は、システム標準のPerlをそのまま使うのではなく、[plenv](https://github.com/tokuhirom/plenv)/[Perl-Build](https://github.com/tokuhirom/Perl-Build)とcpanmを組み合わせて、開発環境を構築するのが主流となっています。

システムを壊すことなく、任意のPerlのバージョンを利用でき、一般ユーザー権限で手軽にPerlの実行環境を整えられるのが大きなメリットです。

以下のコマンドを打てば、環境構築が可能です。シェルの種類やPerlのバージョン等はリリースにあわせて適宜書き換えてください。

    $ git clone https://github.com/tokuhirom/plenv.git ~/.plenv
    $ echo 'export PATH="$HOME/.plenv/bin:$PATH"' >> ~/.bash_profile
    $ echo 'eval "$(plenv init -)"' >> ~/.bash_profile
    $ exec $SHELL -l
    $ git clone https://github.com/tokuhirom/Perl-Build.git ~/.plenv/plugins/perl-build/
    $ plenv install 5.20.3
    $ plenv rehash
    $ plenv install-cpanm

これで、Perl5.20.3の開発環境が整いました。cpanmというコマンドも使えるようになっているはずです。

perlのバージョニングについての話は以下のエントリーをがよくまとまっているのでそちらもご覧下さい｡

[Q. Perl5 のどのバージョンをつかったらいいのですか?](http://blog.64p.org/entry/2013/06/10/134208)

### cpanm の設定

CPAN の設定に慣れ親しんでいる人、すでに設定が終わっている人はこの項目は読み飛ばしてください。
ただ、今現在 Perl 標準の CPAN シェルをお使いでしたら、cpanm への移行をおすすめします。

CPAN とは Perl のモジュールのレポジトリであり、膨大な数のモジュールがアップロードされています。
Perl の開発を効率的に行うためにはこの CPAN モジュールを有効に活用するかどうかが重要になります。

CPAN モジュールは `cpanm` コマンドを使用してインストールすることが出来ます。

cpanm は CPAN レポジトリからだけではなく、tarball や URL を指定したモジュールインストールも可
能になっています。

Ark のインストール
---------------

cpanm コマンドの設定が完了したら Ark をインストールしましょう。

    $ cpanm Ark

Module::Setup のインストール
----------------------------

アプリケーションを作り始める場合、一から書き始めるのではなくスケルトンから作りはじめるのが普通でしょう。

Ark 自身はスケルトン作成機構を持っていません。
フレームワーク自体がスケルトン作成機能を持つよりかは、既存のスケルトン作成モジュールに任せてしまったほうが良いでしょう。車輪の再発明は必要ありません。

ここでは、Module::Setup を使うことにしましょう。こちらもCPANからインストール可能です。

    $ cpanm Module::Setup

Module::Setupは標準でModule::Setup::Flavor以下にFlavor(スケルトン)が幾つか定義されていますが、当然Ark用のFlavorはありません。

ゆくゆくは自分好みのFlavorを使うと良いと思いますが、今回は以下のFlavorを使うことにしましょう。

    $ cpanm https://github.com/Konboi/p5-Module-Setup-Flavor-ArkDBIC/archive/master.tar.gz

### module-setupのセットアップ

    module-setup --init --flavor-class=Ark ark

名前やメールアドレス、バージョン管理ツールについて聞かれると思いますが、適宜入力してください。
これでArkでアプリケーションを作成する準備は完了です。

スケルトンは個人の好みもあるので、最初は他の人のものを使わせてもらっても良いと思いますが、自分が使いやすいようにカスタマイズしてみると良いでしょう。

Module::Setup の使い方に関しては以下を参照してみてください。

[Module::Setup でらくらくモジュール作成](http://perl-users.jp/articles/advent-calendar/2009/hacker/19.html)

アプリケーションの作成
------------------

それではアプリケーションを作成してみましょう。

    $ module-setup Jobeet
    [1]: default
    [2]: ark

と表示されるので`ark`を選択しましょう｡ `Jobeet` ディレクトリが作成され、その中にアプリケーションのスケルトンが作成されます。

アプリケーションディレクトリの構成
-----------------------------

出来たスケルトンの各ディレクトリの役割は以下のようになります。

 * lib - アプリケーションコードを格納するディレクトリ
 * root - ドキュメントルート、およびテンプレートディレクトリ
 * tmp - キャッシュ、fcgiのソケットなど一時的なファイルを置くディレクトリ
 * t - アプリケーションのテストコードを置くディレクトリ

ファイルの役割は以下のようになります。

 * cpanfile - 依存モジュールの定義などを行います｡ rubyのGemfileのような存在です
 * lib/Jobeet.pm - アプリケーションメインクラス
 * lib/Jobeet/Controller.pm - ルートコントローラクラス

スケルトンアプリケーションの起動
---------------------------

Ark は Plack に対応しているので、以下のコマンドで簡単にスケルトンアプリケーションを起動できます。

    $ cpanm Plack
    $ plackup -r dev.psgi
    Watching ./lib dev.psgi for file updates.
    [debug] Loaded Path actions:
    .-------------------------------------+--------------------------------------.
    | Path                                | Private                              |
    +-------------------------------------+--------------------------------------+
    | /                                   | /index                               |
    | /                                   | /default                             |
    '-------------------------------------+--------------------------------------'

    [debug] Setup finished
    HTTP::Server::PSGI: Accepting connections at http://0:5000/

このような出力になったら起動完了です。このようにコンソールにデバッグに便利なさまざまな情報が表示されます。
特にルーティングテーブルの表示は地味に便利であり、他のフレームワークにはなかなか無いものです。

plackup の -E オプション(標準はdevelopment)により表示を変更できますが、開発時は基本的にこの development モードで開発を行うと良いでしょう。

ブラウザから `http://0.0.0.0:5000/` にアクセスしてみてください。

    Ark Default Index

と言う文字が表示されましたか？ これは Ark アプリケーションが正常に起動していることを示します。

### plackup の -r オプションについて

-r オプションをつけておくと、 lib/ 以下や、.psgi 変更を検知してサーバーを再起動してくれます。開発中はつけておくと良いでしょう。

ちなみに、 -L Shotgun というオプションもあるのですが、これはリクエストの度にサーバープロセスを再起動するので、動きが重くおすすめしません。


それではまた明日！
---------------

はい、今日はここまでです。まだ Perl コードを一行も書いていませんが、Ark の開発環境をセットアップし、アプリケーションのスケルトンを作成することができました。

明日は、アプリケーションが何を行うのかを明らかにしチュートリアルの間に実装する必要のある要件を話します。
