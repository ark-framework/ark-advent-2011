データモデルその2

昨日は DBIx::Class の基本について学習しました。まだ生き残っていますか？

今日は引き続きデータモデルについて学習します。

昨日のフィードバック
-----------------

本日の内容に入る前に、昨日の内容で `use parent` や `__PACKAGE__` がなにを意味しているかわからないという人がいましたので少し説明しておきます。

    use parent 'ClassName';

は ClassName と言うクラスを継承すると言う意味です。詳しくは `perldoc parent` などを参照ください。
(baseというモジュールもありますが現在はparentを使うことが推奨されています。こちらも詳しくは `perldoc base` を参照ください。)

    __PACKAGE__

はそれが書かれた行が属するパッケージ名を表します。したがって

    package Jobeet::Schema;
    use strict;
    use warnings;
    use parent 'DBIx::Class::Schema';

    __PACKAGE__->load_namespaces;

    1;

と言うコードの `__PACKAGE__` は `Jobeet::Schema` を表します。ここで

    Jobeet::Schema->load_namespaces;

としても意味は同じですし、これでもコードはただしく動作します。

またこの `Jobeet::Schema` は `DBIx::Class::Schema` を継承していることもわかりますね。


本日の内容
--------

それでは改めて本日の内容を説明しましょう。本日は Ark から昨日定義した Jobeet::Schema を使用する方法を学習し、
そしてスキーマ定義を変更した場合 DBIx::Class を使用してどのようにそれをアップグレードするかを学習します。また簡単なスクリプトを使用してデータベースにデフォルトのデータを格納しましょう。

Arkのモデル
---------

Arkのモデルについての詳細は明日学習します。詳しいことはいまは置いておいて Ark モデルとして Jobeet::Schema を使えるようにしてみましょう。

以下のようにして Jobeet::Models と言うクラスを定義してください。

    package Jobeet::Models;
    use strict;
    use warnings;
    use Ark::Models '-base';

    register Schema => sub {
        my $self = shift;

        my $conf = $self->get('conf')->{database}
            or die 'require database config';

        $self->ensure_class_loaded('Jobeet::Schema');
        Jobeet::Schema->connect(@$conf);
    };

    for my $table (qw/Job Category CategoryAffiliate Affiliate/) {
        register "Schema::$table" => sub {
            my $self = shift;
            $self->get('Schema')->resultset($table);
        };
    }

    1;

今日のところは register という関数でモデルを登録するのだなということを覚えておいてください。このコードでは

 * Schema
 * Schema::Job
 * Schema::Category
 * Schema::CategoryAffiliate
 * Schema::Affiliate

と言う名前で Ark のモデルを定義したことになります。

ところで、Schemaを追加する度に、定義を追加するのは面倒です。以下のようにすれば、Schema/Result/ 以下のモジュールを自動的に登録してくれます。

    autoloader qr/^Schema::/ => sub {
        my ($self, $name) = @_;

        my $schema = $self->get('Schema');
        for my $t ($schema->sources) {
            $self->register( "Schema::$t" => sub { $schema->resultset($t) });
        }
    };

また

    my $conf = $self->get('conf')->{database}

と言う部分があるのにお気づきでしょうか。ここに直接データベース設定を書いてもかまいませんが、Ark は設定ファイルによる設定もサポートしていますのでここではそれを利用します。

新しく config.pl と言うファイルを作成し、以下のように書いてください：

    my $home = Jobeet::Models->get('home');

    return {
        database => [
            'dbi:SQLite:' . $home->file('database.db'), '', '',
             {
                 sqlite_unicode => 1,
             },
        ],
    };

これはアプリケーションホームディレクトリ（トップディレクトリ）の database.db と言うファイル名の SQLite データベースを使用すると言う意味です。
また Ark は *内部はすべてutf8であつかう* というモダンPerlの流儀に沿ったフレームワークなので、unicode 周りのオプションを指定しています。これは `DBD::SQLite` のオプションなのでほかの `DBD::mysql` などを使用する場合は対応するそちらのオプションを指定する必要があります。例えば MySQL を使用する場合 config.pl は

    return {
        database => [
            'dbi:mysql:database_name', 'username', 'password',
             {
                 mysql_enable_utf8 => 1,
                 on_connect_do     => ['SET NAMES utf8'],
             },
        ],
    };

のようになります。このチュートリアルでは SQLite を使用していきます。

最後に Jobeet アプリケーションのデフォルトモデルとして `Jobeet::Models` を使用するために Jobeet.pm に以下の1行をいれてください。

    use_model 'Jobeet::Models';

お疲れさまでした。以上の作業で無事に Jobeet::Models は Jobeet アプリケーションのモデルクラスとして動作するようになります。

今日は大変めんどくさいコードを書かせてしまいましたが、熟練した Ark プログラマーはこのようにアプリケーションを作成するたびに同じようなことを書くと言うことはしません。初日にも少し説明したように、自分好みのスケルトンを作り、それをベースにアプリ開発ができるようにあると一人前です。

スキーマのバージョニング
--------------------

Arkモデルについてはまた明日学習することにして、GitDDLを用いたスキーマのバージョニングを試してみましょう｡

以下のようなストーリーを考えてみてください。

あなたはマッシュとリサと一緒に新しいプロジェクトをはじめました。ある日、あなたがいない間にマッシュがデータベースに新しいカラムを追加しました。その後リサも他のテーブルのカラム定義を変更しました。

あなたはデスクに戻ったらマッシュとリサがそれぞれした変更を適用する必要があります。
コードをpullしてその後はどうしますか？ 手動でデータベースを修正しますか？

自分の環境だけですむならそれでもそんなに苦労はしないでしょう。しかし手元の開発環境と、ステージングサーバー、そして本番サーバーなど、いろんな環境にその修正をしなければいけなかったとしたらどうでしょう。そのようなシステムではデータベース定義の変更というのは細心の注意を払う必要があります。

GitDDL はデータベースのバージョンをサポートするtのでそのような苦労をする必要はありません。コードのデータベースバージョンが、実際のデータベースのバージョンより新しくなっていたら（誰かがデータベース定義を更新したら）コマンド一つで最新のデータベース定義へデータベースを更新することが出来ます。

DBIx::Class でも同様の機能を提供していますが､今回はGitDDLを使ってデータベースのバージョニングを行っていきましょう｡

それでは作業に入りましょう。
まずはcpanfileに以下を追記して必要なモジュールをインストールしていきましょう｡

    requires 'GitDDL'
    requires 'Path::Class

バージョニングをサポートするために二つのスクリプトを用意する必要があります。

二つのスクリプトとは、

 * スキーマ定義（DDL）ファイルを作成するスクリプト
 * DDLを元にデータベースをアップグレードするスクリプト

です。scriptディレクトリを作成し、`script/create_ddl.pl` として以下のような物を書いてください。

    use strict;
    use warnings;
    use utf8;
    use lib 'lib';

    use Jobeet::Models;
    use DBIx::Class::Optional::Dependencies;
    use Path::Class;

    my $sql_file = models('home') . '/schema.sql';
    my $file     = Path::Class::file($sql_file);

    my $output = models('Schema')->deployment_statements(
        undef, undef, undef, {
            no_comments    => 1,
            add_drop_table => 0,
        }
    );

    $file->parent->mkpath;
    $file->spew( iomode => '>:encoding(UTF-8)', $output );


このスクリプトは sql ディレクトリに `schema.sql` という Jobeet::Schema の定義を書き出します。

試しに実行しましょう。

    $ carton exec perl ./script/create_ddl.pl

その後 sql ディレクトリを見てみましょう。

    $ ls -l sql
    total 16
    -rw-r--r--  1 typester  staff  1905  3 28 19:35 schema.sql

このようなファイルが書き出されます。

もう一つのスクリプトはこの DDL ファイルを使用して実際のデータベースをアップグレードする物です。`script/migrate.pl` として以下のようなスクリプトを作成してください。

    use strict;
    use warnings;
    use utf8;
    use lib 'lib';

    use Jobeet::Models;
    use Getopt::Long;
    use GitDDL;

    GetOptions(
        \my %options,
        qw/dry-run/
    );

    my $dsn = models('conf')->{database}->[0];
    my $gd = GitDDL->new(
        work_tree => './',
        ddl_file  => './schema.sql',
        dsn       => models('conf')->{database},
    );

    my $db_version = '';
    eval {
        open my $fh, '>', \my $stderr;
        local *STDERR = $fh;
        $db_version    = $gd->database_version;
    };

    if (!$db_version) {
        $gd->deploy;
        say 'done migrate';
        exit;
    }

    if ($gd->check_version) {
        say 'Database is already latest';
    } else {
        print $gd->diff . "\n";
        if (!$options{'dry-run'}) {
            $gd->upgrade_database;
            say 'done migrate';
        }
    }


このスクリプトは DDL ファイルと DDLファイルの のgitのコミットバージョンから最新のものにデータベースを更新するスクリプトです。データベースがない場合は自動で作成してくれます。
そのためプロジェクト自体がgitで管理されている必要があります｡

まだ`sql/schema.sql`をコミットしていない場合はしてしまいましょう｡

それでは､試しに実行してみましょう。

    $ carton exec perl ./script/migrate.pl

database.db という config.pl で指定したデータベースが作成されたでしょうか？ 今後はデータベースへの更新がある度に､このスクリプトを使用していつでも最新の構成にすることができます。

### スキーマを変更する

さて、昨日のチュートリアルを注意深く読んでいた方は気がついているかもしれません。このスキーマ変更を学習するために昨日定義したスキーマ定義はあえて不十分だったのです！ 今日その足りない定義を追加しスキーマ定義を完璧にするとともにスキーマのバージョニングがただしく動作することを学習しましょう。

昨日した定義の中でたりないものは Job テーブルの company, logo, url の3つのカラムです。`Jobeet::Schema::Result::Job` のカラム定義に以下を追加しましょう。

        company => {
            data_type   => 'VARCHAR',
            size        => 255,
            is_nullable => 1,
        },
        logo => {
            data_type   => 'VARCHAR',
            size        => 255,
            is_nullable => 1,
        },
        url => {
            data_type   => 'VARCHAR',
            size        => 255,
            is_nullable => 1,
        },

定義を更新したので、DDLファイルも新しく作り直し、バージョン番号を上げます。それをやるには以下のスクリプトを実行するんでした：

    $ carton perl ./script/create_ddl.pl

さてこれで、`sql/schema.sql` ファイルが更新されているはずです。

    $ git diff sql
    diff --git a/sql/schema.sql b/sql/schema.sql
    index d3f7657..effce4d 100644
    --- a/sql/schema.sql
    +++ b/sql/schema.sql
    @@ -39,6 +39,9 @@ CREATE TABLE jobeet_job (
        expires_at DATETIME NOT NULL,
        created_at DATETIME NOT NULL,
        updated_at DATETIME NOT NULL,
     +  company VARCHAR(255),
     +  logo VARCHAR(255),
     +  url VARCHAR(255),
        FOREIGN KEY (category_id) REFERENCES jobeet_category(id) ON UPDATE CASCADE
    );

データベースを最新の定義に更新するには`sq/schema.sql`をコミットし先ほどの migrate.pl を再び実行します。
--dry-run オプションを使用すると実際にアップグレードするまえに実行する SQL を確認することが出来ます。まずそれを実行してみましょう。

    $ carton exec perl ./script/migrate.pl -d

以下のような出力が出ましたか？

    BEGIN;
    ALTER TABLE jobeet_job ADD COLUMN company VARCHAR(255);
    ALTER TABLE jobeet_job ADD COLUMN logo VARCHAR(255);
    ALTER TABLE jobeet_job ADD COLUMN url VARCHAR(255);
    COMMIT;

期待する内容になっていますね。それではアップグレードしましょう。

    $ carton exec perl ./script/migrate.pl

これで database.db は最新の定義になりました。もう一度スクリプトを実行してみると

    $ carton exec perl script/migrate.pl
    Database is already latest

のようにアップグレードが必要ないと言うメッセージがでます。これはデータベースが最新であると言うことを意味します。

これでデータベースのバージョニングがただしく行えるようになりました。
先のストーリーではあなたはマッシュやリサがした変更は `migrate.pl` を実行するだけでどちらも適用することができるでしょう。

初期データ
--------

データベースにテーブルが作成されました。しかしデータがありません。 Web アプリケーションには3種類のデータがあります:

 * 初期データ: アプリケーションを動作させるのに必要なデータ。 たとえば、Jobeet ではカテゴリが必要となります。 もしカテゴリが無ければ誰も仕事を投稿できなくなります。
 * テストデータ: アプリケーションのテストに必要です。 開発者にとって、ストーリーどおりに Jobeet が動作するのを確認するためにテストを書きます。 自動化テストを書くのが1番よい方法です。 テストを実施するたびにテストデータでデータベースをクリアする必要があります。
 * ユーザーデータ: アプリケーションの運用中にユーザーによって作られたデータ

テストデータに関しては後日学習しましょう。

初期データをいれるのには DBIx::Class の学習もかねて初期データをいれるスクリプトを書いてみましょう。script/insert_default_data.pl と言う名前で以下のようなスクリプトを書いてみましょう。

おっとその前に依存モジュールをインストールしてしまいましょう｡ `cpanfile` に

    requires 'DateTime::Format::SQLite';

を追加してモジュールをインストールしましょう｡ それでは気を取り直して初期データを入れるスクリプトを書いていきましょう｡


    #!/usr/bin/env perl

    use strict;
    use warnings;
    use FindBin::libs;

    use Jobeet::Models;

    # create default Categories
    for my $category_name (qw/Design Programming Manager Administrator/) {
        models('Schema::Category')->create({ name => $category_name });
    }

    # create default Jobs
    my $programming_category =
        models('Schema::Category')->find({ name => 'Programming' });
    $programming_category->add_to_jobs({
        type         => 'full-time',
        company      => 'Sensio Labs',
        logo         => 'sensio-labs.gif',
        url          => 'http://www.sensiolabs.com/',
        position     => 'Web Developer',
        location     => 'Paris, France',
        description  => q[You've already developed websites with symfony and you want to work with Open-Source technologies. You have a minimum of 3 years experience in web development with PHP or Java and you wish to participate to development of Web 2.0 sites using the best frameworks available.],
        how_to_apply => 'Send your resume to fabien.potencier [at] sensio.com',
        is_public    => 1,
        is_activated => 1,
        token        => 'job_sensio_labs',
        email        => 'job@example.com',
        expires_at   => '2010-10-10',
    });

    my $design_category = models('Schema::Category')->find({ name => 'Design' });
    $design_category->add_to_jobs({
        type         => 'part-time',
        company      => 'Extreme Sensio',
        logo         => 'extreme-sensio.gif',
        url          => 'http://www.extreme-sensio.com/',
        position     => 'Web Designer',
        location     => 'Paris, France',
        description  => q[Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Utenim ad minim veniam, quis nostrud exercitation ullamco laborisnisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in. Voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpaqui officia deserunt mollit anim id est laborum.],
      how_to_apply   => 'Send your resume to fabien.potencier [at] sensio.com',
        is_public    => 1,
        is_activated => 1,
        token        => 'job_extreme_sensio',
        email        => 'job@example.com',
        expires_at   => '2010-10-10',
    });

そしてこれを実行してみてください。実行される SQL がみたいときは DBIC_TRACE 環境変数をつかうといいですよ。

    $ DBIC_TRACE=1 carton exec perl script/insert_default_data.pl

ずらずらとCREATE文がでましたか？ これでデフォルトデータも出来ました。

もしデータベースを最初から作りたい場合は

    $ rm database.db
    $ carton exec perl script/create_ddl.pl
    $ carton exec perl script/migrate.pl

のようにすれば作り直すことが出来ますよ。

さてここで作成した二つの Job データはそれぞれ画像データを必要とします。 (http://www.symfony-project.org/get/jobeet/sensio-labs.gif、http://www.symfony-project.org/get/jobeet/extreme-sensio.gif) からダウンロードして root/uploads/jobs/ ディレクトリに設置してください。

また明日
-------

今日でデータベースを使用する準備は完全に整いました。
明日は、Web フレームワークで最もよく使われるパラダイムの1つである MVC デザインパターンについて話します。
